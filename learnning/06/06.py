# TODO 使用图像描述符检索和搜索图像

"""
# 6.2理解特征检测和匹配的类型
#   有许多算法可以用来检测和描述特征，本节将探讨其中一些算法。
#   OpenCV中最常用的特征检测和描述符提取算法如下：
#   ·Harris：该算法适用于角点检测。
#   ·SIFT：该算法适用于斑点检测。
#   ·SURF：该算法适用于斑点检测。
#   ·FAST：该算法适用于角点检测。·
#   ·BRIEF：该算法适用于斑点检测。
#   ·ORB：它是Oriented FAST和Rotated BRIEF的联合缩写。
# 其中ORB对于角点和斑点的组合检测很有用。可以通过下列方法进行特征匹配：
#   ·蛮力匹配。
#   ·基于FLANN的匹配。
#   可以通过单应性进行空间验证。
# 特征的定义：
#   广义地说，特征是图像中独特或容易识别的一个感兴趣区域。
#   具有高密度纹理细节的角点和区域是好的特征，而在低密度区域（如蓝天）不断重复出现的模式就不是好的特征。
#   边缘是好的特征，因为它们倾向于把图像分割成两个区域。斑点（与周围区域有很大差别的图像区域）也是一个有趣的特征。
#   大多数特征检测算法都围绕着角点、边缘和斑点的识别展开，有些还关注岭（ridge）的概念，其中岭可以概念化为细长物体的对称轴。
"""
# 6.3 harris角点检测
#   chapter06/corner.py

# 6.4 检测DoG特征并提取SIFT描述符
#   缩小图像会引发特征丢失，于是使用尺度不变特征变换（Scale-Invariant Feature Transform，SIFT）
#   DoG是对同一幅图像应用不同的高斯滤波器的结果。
#   用于边缘检测，最终结果包含感兴趣区域（关键点），然后通过SIFT进行描述。
#   chapter06/sift.py

# 6.5 检测快速Hessian特征并提取SURF描述符
#   v2.SURF是一个OpenCV类用快速Hessian算法进行关键点检测，并用SURF进行描述符提取，
#   就像cv2.SIFT类一样（用DoG进行关键点检测，用SIFT进行描述符提取）

"""
# 6.6 使用基于FAST特征和BRIEF描述符的ORB
#   FAST：
#     加速分割测试的特征（Feature from Accelerated Segment Test，FAST）
#       FAST算法把邻域内每个像素标记为比特定阈值更亮或更暗，该阈值是相对于圆心定义的。
#       如果邻域包含若干标记为更亮或更暗的一系列连续像素，那么这个邻域就被视为角点。
#       FAST是对输入很敏感的一种算法，也许比SIFT更敏感。
#   BRIEF：
#     二值鲁棒独立基本特征（Binary Robust Independent Elementary Feature，BRIEF）
#       BRIEF并非特征检测算法，而是一个描述符。
#       检测结果是一组关键点，计算结果是这些关键点的一组描述符。
#       这意味着OpenCV的cv2.SIFT和cv2.SURF类都实现了检测和描述算法。
#       原始的SIFT和SURF不是特征检测算法。
#       OpenCV的cv2.SIFT实现了DoG特征检测和SIFT描述，而OpenCV的cv2.SURF实现了快速Hessian特征检测和SURF描述。
#       关键点描述符是图像的一种表示，充当特征匹配的通道，
#       因为你可以比较两幅图像的关键点描述符并发现它们的共性。BRIEF是目前最快的描述符之一。
#       BRIEF背后的理论相当复杂，但是可以这样说，BRIEF采用一系列优化，使其成为特征匹配的一个非常好的选择。
#   蛮力匹配：
#     蛮力匹配器是一个描述符匹配器，它比较两组关键点描述符并生成匹配列表。
#       概括地说，在计算中，“蛮力”一词是指将所有可能组合
#       （例如，破解已知长度密码的所有可能的字符组合）的穷举按优先级排序的方法。
#       相反，优先考虑速度的算法可能会跳过一些可能性，并试图走一条捷径来找到看似最合理的解决方案。
#       OpenCV提供了一个cv2.BFMatcher类，支持几种蛮力特征匹配的方法。
#   ·为FAST增加一个快速且准确的定位组件。
#   ·面向BRIEF特征的高效计算。
#   ·面向BRIEF特征的方差和相关性分析。
#   ·在旋转不变性下去相关BRIEF特征的一种学习方法，在最近邻应用中产生更好的性能。
#   综上，ORB的目标是优化和加速操作，
#   包括非常重要的以旋转感知的方式利用BRIEF的步骤，
#   这样匹配就得以改善，即使在训练图像与查询图像有非常不同的旋转状态的情况下也是如此。
"""
# TODO 6.6.4　匹配两幅图像中的标识
#   chapter06/orb.py
#   优化：6.7　使用K最近邻和比率检验过滤匹配
#        chapter06/orb_knn.py

